<script>
//margin on the container svg
var margin = {top: 20, right: 20, bottom: 40, left: 60},
    width = 960 - margin.left - margin.right,
    height = 500 - margin.top - margin.bottom;

//binding a number to the rectangles
//scales everthing so that it fits into our svg size
//ordinal decides what width to give the bars.
var x = d3.scale.ordinal()
    .rangeRoundBands([0, width], .1);

var y = d3.scale.linear()
    .range([height, 0]);

var yAxis = d3.svg.axis()
    .scale(y)
    .orient("left")
    .ticks(10);

//add the core svg element and git it width and height
//'transform'= 'translate' take every coordinate, add the margin left and right 
var svg = d3.select("#graph").append("svg")
    .attr("width", width + margin.left + margin.right)
    .attr("height", height + margin.top + margin.bottom)
    .append("g")
    .attr("transform", "translate(" + margin.left + "," + margin.top + ")");

//loads up tsv(tab separated values)(from excel--hard coded)
d3.tsv("<%=@graph.dataset.data_file.url%>", type, function(error, data) {
  x.domain(data.map(function(d) { return d.category; }));
  y.domain([0, d3.max(data, function(d) { return d.number; })]);

var xAxis = d3.svg.axis()
    .scale(x)
    .orient("bottom")
    .tickValues(x.domain().filter(function(d, i, a) { 
                       if (a.length > 20) {
                          return !(i % 2); 
                       } else {
                          return true;
                       }}
                       ));
<%= render partial: "axes" %>
//puts the data in the svg from the numberdata.txt
  svg.selectAll(".bar")
      .data(data)
    .enter().append("rect")
      .attr("class", "bar")
      .attr("x", function(d) { return x(d.category); })
      .attr("width", x.rangeBand())
      .attr("y", function(d) { return y(d.number); })
      .attr("height", function(d) { return height - y(d.number); });

});
//this loads the whole thing in.
function type(d) {
  d.number = +d.number;
  return d;
}

</script>
